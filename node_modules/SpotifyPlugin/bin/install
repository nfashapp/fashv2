#!/usr/bin/env node

var path = require('path')
  , fs = require('fs')
  , request = require('request')
  , shell = require('shelljs')
  , zlib = require('zlib')
  , tar = require('tar');

var projectDir = path.resolve(__dirname, '..');

var devDir = path.join(projectDir, 'development');
var cordovaDir = path.join(devDir, 'CordovaLib');
var spotifyDir = path.join(devDir, 'Spotify.framework');
var OHHTTPStubsDir = path.join(devDir, 'OHHTTPStubs');

var tmpDir = path.join(devDir, 'tmp');
var cordovaTmpDir = path.join(tmpDir, 'cordova-ios-3.7.0/CordovaLib');
var spotifyTmpDir = path.join(tmpDir, 'ios-sdk-beta-6/Spotify.framework');
var OHHTTPStubsTmpDir = path.join(tmpDir, 'OHHTTPStubs-3.1.6/OHHTTPStubs');

var pchFile = path.join(__dirname, 'project_files', 'SpotifyPlugin-Prefix.pch');
var xcodeProj = path.join(__dirname, 'project_files', 'xcode', '*');
var xcodeProjTarget = path.join(projectDir, 'SpotifyPlugin.xcodeproj');

shell.rm('-rf', devDir);
shell.mkdir('-p', tmpDir);

downloadCordovaLib();

function downloadCordovaLib() {
  var size;
  if (fs.existsSync(cordovaDir)) {
    console.log('CordovaLib exists');

    return downloadSpotifyFramework();
  }

  console.log('Downloading CordovaLib');

  var req = request.get({
    url: 'https://github.com/apache/cordova-ios/archive/3.7.0.tar.gz'
  }, function(err, res, body) {
    if (err || res.statusCode != 200) {
      shell.rm('-rf', tmpDir);
    } else {
      size = body.length;
    }
  });

  req.pipe(zlib.createUnzip())
  .pipe(tar.Extract({path:tmpDir}))
  .on('error', function(err) {
    shell.rm('-rf', tmpDir);
  })
  .on('end', function() {
    shell.mv('-f', cordovaTmpDir, devDir);
    downloadSpotifyFramework();
  });
}

function downloadSpotifyFramework() {
  var size;
  if (fs.existsSync(spotifyDir)) {
    console.log('Spotify.framework exists');

    return downloadOHHTTPStubs();
  }

  console.log('Downloading Spotify.framework');

  var req = request.get({
    url: 'https://github.com/spotify/ios-sdk/archive/beta-6.tar.gz'
  }, function(err, res, body) {
    if (err || res.statusCode != 200) {
      shell.rm('-rf', tmpDir);
    } else {
      size = body.length;
    }
  });

  req.pipe(zlib.createUnzip())
  .pipe(tar.Extract({path:tmpDir}))
  .on('error', function(err) {
    shell.rm('-rf', tmpDir);
  })
  .on('end', function() {
    shell.mv('-f', spotifyTmpDir, devDir);
    downloadOHHTTPStubs();
  });
}

function downloadOHHTTPStubs() {
  var size;
  if (fs.existsSync(OHHTTPStubsDir)) {
    console.log('OHHTTPStubs exists');

    return createXcodeProj();
  }

  console.log('Downloading OHHTTPStubs');

  var req = request.get({
    url: 'https://github.com/AliSoftware/OHHTTPStubs/archive/3.1.6.tar.gz'
  }, function(err, res, body) {
    if (err || res.statusCode != 200) {
      shell.rm('-rf', tmpDir);
    } else {
      size = body.length;
    }
  });

  req.pipe(zlib.createUnzip())
  .pipe(tar.Extract({path:tmpDir}))
  .on('error', function(err) {
    shell.rm('-rf', tmpDir);
  })
  .on('end', function() {
    shell.mv('-f', OHHTTPStubsTmpDir, devDir);
    createXcodeProj();
  });
}

function createXcodeProj() {
  shell.rm('-rf', tmpDir);
  shell.cp('-f', pchFile, projectDir);
  shell.cp('-rf', xcodeProj, xcodeProjTarget);

  console.log('done');
}
