{"version":3,"sources":["../../../src/@ionic-native/plugins/native-audio/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AASH,IAAa,WAAW;IAAS,+BAAiB;IAAlD;;IAyEA,CAAC;IAxEC;;;;;OAKG;IAEH,mCAAa,GAAb,UAAc,EAAU,EAAE,SAAiB,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErE;;;;;;;;OAQG;IAEH,oCAAc,GAAd,UAAe,EAAU,EAAE,SAAiB,EAAE,MAAc,EAAE,MAAc,EAAE,KAAa,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErH;;;;;OAKG;IAKH,0BAAI,GAAJ,UAAK,EAAU,EAAE,gBAA2B,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEtE;;;;OAIG;IAEH,0BAAI,GAAJ,UAAK,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEzC;;;;OAIG;IAEH,0BAAI,GAAJ,UAAK,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEzC;;;;OAIG;IAEH,4BAAM,GAAN,UAAO,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAE3C;;;;;OAKG;IAEH,8CAAwB,GAAxB,UAAyB,EAAU,EAAE,MAAc,IAAiB,MAAM,CAAC,CAAC,CAAC;IAQ/E,kBAAC;AAAD,CAzEA,AAyEC,CAzEgC,iBAAiB,GAyEjD;AANM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAhEA;IADC,OAAO,EAAE;;;;gDAC2D;AAYrE;IADC,OAAO,EAAE;;;;iDAC2G;AAYrH;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;6CACkC,QAAQ;;uCAA0B;AAQtE;IADC,OAAO,EAAE;;;;uCAC+B;AAQzC;IADC,OAAO,EAAE;;;;uCAC+B;AAQzC;IADC,OAAO,EAAE;;;;yCACiC;AAS3C;IADC,OAAO,EAAE;;;;2DACmE;AAjElE,WAAW;IARvB,MAAM,CAAC;QACN,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,4BAA4B;QACpC,SAAS,EAAE,qBAAqB;QAChC,IAAI,EAAE,8DAA8D;QACpE,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;KACzC,CAAC;GAEW,WAAW,CAyEvB;SAzEY,WAAW","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Native Audio\n * @description Native Audio Playback\n * @usage\n * ```typescript\n * import { NativeAudio } from '@ionic-native/native-audio';\n *\n * constructor(private nativeAudio: NativeAudio) { }\n *\n * ...\n *\n * this.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\n * this.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\n *\n * this.nativeAudio.play('uniqueId1').then(onSuccess, onError);\n *\n * // can optionally pass a callback to be called when the file is done playing\n * this.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));\n *\n * this.nativeAudio.loop('uniqueId2').then(onSuccess, onError);\n *\n * this.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\n *\n * this.nativeAudio.stop('uniqueId1').then(onSuccess,onError);\n *\n * this.nativeAudio.unload('uniqueId1').then(onSuccess,onError);\n *\n * ```\n */\n@Plugin({\n  pluginName: 'NativeAudio',\n  plugin: 'cordova-plugin-nativeaudio',\n  pluginRef: 'plugins.NativeAudio',\n  repo: 'https://github.com/floatinghotpot/cordova-plugin-nativeaudio',\n  platforms: ['Android', 'Browser', 'iOS']\n})\n\nexport class NativeAudio extends IonicNativePlugin {\n  /**\n   * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.\n   * @param id {string} unique ID for the audio file\n   * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  preloadSimple(id: string, assetPath: string): Promise<any> {return; }\n\n  /**\n   * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.\n   * @param id {string} unique ID for the audio file\n   * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n   * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)\n   * @param voices {number} the number of multichannel voices available\n   * @param delay {number}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  preloadComplex(id: string, assetPath: string, volume: number, voices: number, delay: number): Promise<any> {return; }\n\n  /**\n   * Plays an audio asset\n   * @param id {string} unique ID for the audio file\n   * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  play(id: string, completeCallback?: Function): Promise<any> {return; }\n\n  /**\n   * Stops playing an audio\n   * @param id {string} unique ID for the audio file\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stop(id: string): Promise<any> {return; }\n\n  /**\n   * Loops an audio asset infinitely, this only works for complex assets\n   * @param id {string} unique ID for the audio file\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  loop(id: string): Promise<any> {return; }\n\n  /**\n   * Unloads an audio file from memory\n   * @param id {string} unique ID for the audio file\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  unload(id: string): Promise<any> {return; }\n\n  /**\n   * Changes the volume for preloaded complex assets.\n   * @param id {string} unique ID for the audio file\n   * @param volume {number} the volume of the audio asset (0.1 to 1.0)\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setVolumeForComplexAsset(id: string, volume: number): Promise<any> {return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}