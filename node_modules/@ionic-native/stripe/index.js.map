{"version":3,"sources":["../../../src/@ionic-native/plugins/stripe/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAgFxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AASH,IAAa,MAAM;IAAS,0BAAiB;IAA7C;;IAiEA,CAAC;IA/DC;;;;OAIG;IAEH,kCAAiB,GAAjB,UAAkB,cAAsB,IAAmB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;;OAIG;IAEH,gCAAe,GAAf,UAAgB,MAA6B,IAAqB,MAAM,CAAC,CAAC,CAAC;IAE3E;;;;OAIG;IAEH,uCAAsB,GAAtB,UAAuB,MAA+B,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEpF;;;;OAIG;IAEH,mCAAkB,GAAlB,UAAmB,UAAkB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;;OAIG;IAEH,4BAAW,GAAX,UAAY,GAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElD;;;;;OAKG;IAEH,mCAAkB,GAAlB,UAAmB,QAAgB,EAAE,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/E;;;;OAIG;IAEH,4BAAW,GAAX,UAAY,UAAkB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAQ9D,aAAC;AAAD,CAjEA,AAiEC,CAjE2B,iBAAiB,GAiE5C;AANM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAxDA;IADC,OAAO,EAAE;;;;+CAC0D;AAQpE;IADC,OAAO,EAAE;;;;6CACiE;AAQ3E;IADC,OAAO,EAAE;;;;oDAC0E;AAQpF;IADC,OAAO,EAAE;;;;gDACsD;AAQhE;IADC,OAAO,EAAE;;;;yCACwC;AASlD;IADC,OAAO,EAAE;;;;gDACqE;AAQ/E;IADC,OAAO,EAAE;;;;yCACkD;AAzDjD,MAAM;IARlB,MAAM,CAAC;QACN,UAAU,EAAE,QAAQ;QACpB,MAAM,EAAE,uBAAuB;QAC/B,SAAS,EAAE,wBAAwB;QACnC,IAAI,EAAE,oDAAoD;QAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;KACzC,CAAC;GAEW,MAAM,CAiElB;SAjEY,MAAM","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface StripeCardTokenParams {\n  /**\n   * Card number\n   */\n  number: string;\n  /**\n   * Expiry month\n   */\n  expMonth: number;\n  /**\n   * Expiry year\n   */\n  expYear: number;\n  /**\n   * CVC / CVV\n   */\n  cvc?: string;\n  /**\n   * Cardholder name\n   */\n  name?: string;\n  /**\n   * Address line 1\n   */\n  address_line1?: string;\n  /**\n   * Address line 2\n   */\n  address_line2?: string;\n  /**\n   * City\n   */\n  address_city?: string;\n  /**\n   * State / Province\n   */\n  address_state?: string;\n  /**\n   * Country\n   */\n  address_country?: string;\n  /**\n   * Postal code / ZIP Code\n   */\n  postal_code?: string;\n  /**\n   * 3-letter ISO code for currency\n   */\n  currency?: string;\n}\n\nexport interface StripeBankAccountParams {\n  /**\n   * Routing number.\n   */\n  routing_number: string;\n  /**\n   * Account number.\n   */\n  account_number: string;\n  /**\n   * Currency code. Example: `USD`.\n   */\n  currency: string;\n  /**\n   * Country code. Example: `US`.\n   */\n  country: string;\n  /**\n   * Account holder name.\n   */\n  account_holder_name?: string;\n  /**\n   * Account holder type. This can be `individual` or `company`.\n   */\n  account_holder_type?: string;\n}\n\n/**\n * @name Stripe\n * @description\n * A plugin that allows you to use Stripe's Native SDKs for Android and iOS.\n *\n * @usage\n * ```typescript\n * import { Stripe } from '@ionic-native/stripe';\n *\n * constructor(private stripe: Stripe) { }\n *\n * ...\n *\n * this.stripe.setPublishableKey('my_publishable_key');\n *\n * let card = {\n *  number: '4242424242424242',\n *  expMonth: 12,\n *  expYear: 2020,\n *  cvc: '220'\n * };\n *\n * this.stripe.createCardToken(card)\n *    .then(token => console.log(token))\n *    .catch(error => console.error(error));\n *\n * ```\n *\n * @interfaces\n * StripeCardTokenParams\n */\n@Plugin({\n  pluginName: 'Stripe',\n  plugin: 'cordova-plugin-stripe',\n  pluginRef: 'cordova.plugins.stripe',\n  repo: 'https://github.com/zyramedia/cordova-plugin-stripe',\n  platforms: ['Android', 'Browser', 'iOS']\n})\n\nexport class Stripe extends IonicNativePlugin {\n\n  /**\n   * Set publishable key\n   * @param publishableKey {string} Publishable key\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  setPublishableKey(publishableKey: string): Promise<void> { return; }\n\n  /**\n   * Create Credit Card Token\n   * @param params {StripeCardTokenParams} Credit card information\n   * @return {Promise<string>} returns a promise that resolves with the token, or rejects with an error\n   */\n  @Cordova()\n  createCardToken(params: StripeCardTokenParams): Promise<string> { return; }\n\n  /**\n   * Create a bank account token\n   * @param params {StripeBankAccountParams} Bank account information\n   * @return {Promise<string>} returns a promise that resolves with the token, or rejects with an error\n   */\n  @Cordova()\n  createBankAccountToken(params: StripeBankAccountParams): Promise<string> { return; }\n\n  /**\n   * Validates a credit card number\n   * @param cardNumber {string} Credit card number\n   * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid\n   */\n  @Cordova()\n  validateCardNumber(cardNumber: string): Promise<any> { return; }\n\n  /**\n   * Validates a CVC number\n   * @param cvc {string} CVC number\n   * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid\n   */\n  @Cordova()\n  validateCVC(cvc: string): Promise<any> { return; }\n\n  /**\n   * Validates an expiry date\n   * @param expMonth {string} expiry month\n   * @param expYear {string} expiry year\n   * @return {Promise<any>} returns a promise that resolves if the date is valid, and rejects if it's invalid\n   */\n  @Cordova()\n  validateExpiryDate(expMonth: string, expYear: string): Promise<any> { return; }\n\n  /**\n   * Get a card type from card number\n   * @param cardNumber {string} Card number\n   * @return {Promise<string>} returns a promise that resolves with the credit card type\n   */\n  @Cordova()\n  getCardType(cardNumber: string): Promise<string> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}